Міністерство освіти та науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії



З лабораторної роботи №3
з дисципліни Аналіз та рефакторинг коду




 
Виконав:
студент групи ПЗПІ-22-10
Пугачов К. В.
Перевірив:
ас. кафедри ПІ
Дашенков Д.С.
 








Харків
МЕТА


Метою реалізації UI частини є створення зручного, інтуїтивно зрозумілого та функціонального інтерфейсу для системи моніторингу стану мостів, який забезпечує користувачам легкий доступ до даних, візуалізацію показників сенсорів у вигляді графіків та ефективне управління інформацією. За допомогою React UI компонентів та бібліотеки Chart.js реалізовано гнучкий інструмент для відображення даних у реальному часі, що сприяє оперативному аналізу та прийняттю рішень.


ЗАВДАННЯ


	Розробити інтуїтивно зрозумілий інтерфейс користувача, який забезпечує виконання CRUD-операцій для всіх основних сутностей системи, включаючи мости, інспекторів, сенсори, типи сенсорів та дані сенсорів.
	Реалізувати функціональність для перегляду даних сенсорів у вигляді інтерактивних графіків, які відображають динаміку показників у часі.
	Забезпечити інтеграцію інтерфейсу з серверною частиною через REST API для передачі та отримання даних.
	Реалізувати можливості фільтрації, сортування та пошуку даних у таблицях для спрощення роботи користувачів із великими обсягами інформації.
	Використати бібліотеку Chart.js для побудови графіків, забезпечивши їхню інтерактивність та адаптивність.
	Створити адаптивний дизайн інтерфейсу для зручної роботи як на настільних комп’ютерах, так і на мобільних пристроях.
	Забезпечити модульність і багаторазовість компонентів React для спрощення підтримки та розширення функціоналу системи в майбутньому.
	Реалізувати сучасний інтерфейс з використанням бібліотек UI-компонентів, таких як Material-UI або Ant Design, для створення професійного та привабливого дизайну.
	Провести тестування інтерфейсу для перевірки його стабільності, коректності виконання CRUD-операцій та відповідності вимогам системи.
	Підготувати документацію щодо використання інтерфейсу для кінцевих користувачів та розробників.
 
4 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ
4.1 Архітектура системи


Архітектура клієнтської частини системи моніторингу стану мостів побудована на базі React і забезпечує високу продуктивність, гнучкість та зручність в обслуговуванні. Вона спроектована за принципами компонентного підходу, що дозволяє створювати багаторазові, незалежні компоненти з чітко визначеною логікою та інтерфейсом.
Основні рівні архітектури
1.	Компонентний рівень
Уся клієнтська частина побудована з використанням React-компонентів. Кожен компонент відповідає за окрему функцію або частину інтерфейсу, наприклад.
2.	Рівень управління станом
Для управління станом застосунку використовується React Context або бібліотека для управління станом, наприклад Redux (залежно від складності застосунку). Цей рівень відповідає за зберігання глобального стану.
3.	Рівень взаємодії з API
Реалізований модуль для взаємодії з серверною частиною через REST API. Він обробляє запити до серверу, такі як отримання даних, створення, оновлення або видалення записів. Axios або Fetch API використовується для здійснення HTTP-запитів.
4.	Рівень візуалізації даних
Для побудови графіків і діаграм використовується бібліотека Chart.js. Вона дозволяє відображати дані сенсорів у вигляді графіків.
5.	UI/UX рівень
Використовуються компоненти бібліотек для швидкої розробки інтерфейсу, наприклад Material-UI або Ant Design. Це забезпечує єдиний стиль інтерфейсу, відповідність сучасним стандартам дизайну та зручність для користувачів.
Основний потік даних
1.	Користувач взаємодіє з інтерфейсом системи (наприклад, обирає міст або сенсор).
2.	Компоненти React передають запити через API для отримання або оновлення даних.
3.	Дані з серверної частини зберігаються у глобальному стані (через Context або Redux).
4.	Компоненти отримують дані із глобального стану та оновлюють відображення інтерфейсу.
5.	Дані сенсорів передаються у Chart.js для побудови графіків у реальному часі.
Особливості архітектури
	Модульність: кожна частина системи (управління даними, візуалізація, інтерфейс) реалізована у вигляді окремих модулів, що спрощує підтримку та розширення.
	Гнучкість: React забезпечує легку інтеграцію сторонніх бібліотек, таких як Chart.js, для побудови графіків, і дозволяє швидко адаптувати UI під нові вимоги.
	Масштабованість: архітектура дозволяє легко додавати нові функції без суттєвих змін у структурі системи.
Архітектура клієнтської частини забезпечує швидку, стабільну та зручну роботу з даними, а також високу якість візуалізації інформації, необхідної для моніторингу стану мостів.
 
Рисунок 1.1 – Діаграма варіантів використання.

На рисунку 1.2 представлена ER-діаграма, яка відображає структуру бази даних системи управління складом. Кожна сутність в діаграмі представляє таблицю в базі даних, а атрибути сутностей відповідають стовпцям цих таблиць.

 
Рисунок 1.2 – ER-діаграма.

Наведемо структуру проекту на діаграмі пакетів (див. рис. 1.3).

 
Рисунок 1.3 – Діаграма пакетів

На наведених діаграмах можна побачити структуру системи та структуру поведінки користувача на сайті.
 
4.2 Опис інтерфейсу


Інтерфейс клієнтської частини системи моніторингу стану мостів забезпечує користувачам зручний доступ до ключових функцій системи. Основний функціонал реалізований через інтуїтивно зрозумілі компоненти, які дозволяють виконувати CRUD-операції над усіма сутностями та аналізувати дані сенсорів у графічному вигляді.
Головні можливості інтерфейсу
1.	Управління сутностями (CRUD-операції). Інтерфейс надає можливість виконувати повний спектр CRUD-операцій для кожної сутності системи:
	Мости: користувач може створювати нові записи про мости, редагувати їхню інформацію (назва, місцезнаходження, статус тощо), переглядати деталі та видаляти записи.
	Інспектори: інтерфейс дозволяє додавати нових інспекторів, змінювати їхні контактні дані та ролі, переглядати закріплення за мостами або видаляти інспекторів.
	Сенсори: реалізовано функціонал для створення сенсорів із зазначенням типу, місця встановлення та дати інсталяції. Також можна редагувати їхні параметри, переглядати закріплення за мостами або видаляти.
	Типи сенсорів: є можливість додавати нові типи сенсорів із зазначенням одиниць вимірювання, редагувати інформацію або видаляти застарілі записи.
	Дані сенсорів: інтерфейс дозволяє переглядати, додавати або видаляти дані, що надходять від сенсорів.
Кожна операція реалізована через окремі компоненти з інтуїтивно зрозумілими формами, таблицями та кнопками для управління даними. Для роботи з великими обсягами даних передбачено можливість фільтрації, сортування та пошуку.
2.	Візуалізація даних сенсорів. Однією з ключових функцій інтерфейсу є відображення даних, отриманих із сенсорів, у вигляді графіків. Ця функція реалізована за допомогою бібліотеки Chart.js. Користувачі можуть переглядати:
	Лінійні графіки для аналізу динаміки показників сенсорів у часі (наприклад, зміна температури, вібрацій або інших параметрів).
	Інтерактивні елементи графіків, що дозволяють отримати точні значення показників за вибраний момент часу.
	Можливість обирати періоди часу для відображення даних, наприклад, день, тиждень або місяць.
Графіки інтегровані в окремі сторінки, які прив’язані до сенсорів. Наприклад, користувач може вибрати конкретний сенсор, і система відобразить історію його показників у графічному вигляді.
3.	Інтерактивний дизайн. Інтерфейс підтримує адаптивний дизайн, що забезпечує зручність роботи як на великих екранах (настільні комп'ютери), так і на мобільних пристроях. Використовуються сучасні компоненти, такі як таблиці з пагінацією, спливаючі вікна для форм, а також інтерактивні кнопки для CRUD-операцій.
Інтерфейс клієнтської частини системи є функціональним, інтуїтивно зрозумілим і зручним у використанні. Він дозволяє користувачам ефективно управляти всіма сутностями системи.



4.3	 Використані технології


Під час розробки клієнтської частини системи моніторингу стану мостів використовувалися сучасні технології, інструменти та бібліотеки, які забезпечують ефективність, гнучкість і простоту розширення функціоналу. Нижче наведено список основних технологій та їх призначення.
Основні технології:
1.	React
	Фреймворк для створення інтерфейсу користувача з використанням компонентного підходу.
	Забезпечує динамічне оновлення даних без перезавантаження сторінки.
	Дозволяє легко реалізовувати повторно використовувані компоненти.
2.	Chart.js
	Бібліотека для побудови графіків і діаграм.
	Використовується для візуалізації даних сенсорів у вигляді лінійних графіків, гістограм, кругових діаграм тощо.
	Підтримує інтерактивність (наведення курсора, вибір точок на графіку).
3.	Axios
	Бібліотека для здійснення HTTP-запитів.
	Використовується для взаємодії з серверною частиною через REST API.
	Підтримує обробку помилок і асинхронну роботу з даними.
4.	React Router
	Бібліотека для організації маршрутизації в односторінковому застосунку (SPA).
	Забезпечує навігацію між сторінками, такими як список мостів, інформація про інспекторів, дані сенсорів тощо.

 
ВИСНОВКИ


У процесі розробки клієнтської частини системи моніторингу стану мостів було створено інтуїтивно зрозумілий, функціональний та сучасний інтерфейс, який відповідає основним вимогам до управління та аналізу даних. Завдяки використанню React забезпечено модульність і гнучкість у розробці, що дозволяє легко розширювати функціонал у майбутньому. Інтеграція бібліотеки Chart.js надала можливість реалізувати якісну візуалізацію даних сенсорів, що значно спрощує процес аналізу та прийняття рішень.
Інтерфейс підтримує виконання CRUD-операцій для всіх основних сутностей системи (мости, інспектори, сенсори, типи сенсорів і дані сенсорів), що забезпечує повний контроль над інформацією. Додаткові функції, такі як фільтрація, сортування та пошук, роблять роботу з великими обсягами даних швидкою та зручною.
Використання сучасних технологій, таких як React Router, Axios, забезпечило високий рівень інтерактивності, продуктивності та естетичної привабливості інтерфейсу. Завдяки адаптивному дизайну система є доступною для роботи як на настільних комп'ютерах, так і на мобільних пристроях.
Розроблений інтерфейс дозволяє ефективно вирішувати завдання моніторингу стану мостів, забезпечуючи користувачів усіма необхідними інструментами для управління даними, їхнього аналізу та візуалізації. Система відповідає сучасним стандартам веб-розробки і може бути легко інтегрована в ширші інфраструктурні рішення.

Посилання на відеозапис: https://youtu.be/AVi6hncQmFc
Завдання на гітхабі: https://github.com/KyryloPugach/arkpz-pzpi-22-10-puhachov-kyrylo/tree/main/Task3
