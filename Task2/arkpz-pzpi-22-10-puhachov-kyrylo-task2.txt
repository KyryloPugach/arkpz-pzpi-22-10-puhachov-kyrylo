Міністерство освіти та науки України
Харківський національний університет радіоелектроніки





Кафедра програмної інженерії




З лабораторної роботи №2
з дисципліни Аналіз та рефакторинг коду



 
Виконав:
студент групи ПЗПІ-22-10
Пугачов К. В.
Перевірив:
ас. кафедри ПІ
Дашенков Д.С.
 







Харків
МЕТА


Метою розробки серверної частини застосунку є створення надійної, масштабованої та безпечної основи для управління даними і функціональністю системи моніторингу стану мостів.


ЗАВДАННЯ


Поставити вимоги до системи:
	Розробити архітектуру серверної частини застосунку, що забезпечує ефективну обробку запитів та інтеграцію з клієнтськими додатками і IoT-сенсорами.
	Реалізувати базу даних для зберігання інформації про мости, інспекторів, сенсори, типи сенсорів та дані, що надходять від сенсорів.
	Розробити API для забезпечення зв’язку між клієнтськими додатками та серверною частиною, яке дозволяє виконувати CRUD-операції для моделей системи.
	Забезпечити обробку даних від сенсорів, включаючи отримання, збереження і надання доступу до цих даних у зручному для аналізу вигляді.
	Інтегрувати функціонал для візуалізації даних, таких як побудова графіків, для полегшення аналізу показників стану мостів.
	Забезпечити безпеку серверної частини, включаючи захист даних, що передаються, та контроль доступу до системи.
	Реалізувати обробку помилок та логування для моніторингу роботи серверної частини і спрощення процесу її підтримки та вдосконалення.
	Провести тестування серверної частини, щоб переконатися у її стабільності, продуктивності та відповідності вимогам системи.
	Підготувати документацію для подальшої підтримки та інтеграції серверної частини із суміжними компонентами застосунку.
 
1 ХІД РОБОТИ
1.1	Концептуальне моделювання предметної області


Концептуальне моделювання є важливим етапом у процесі розробки програмного забезпечення, що дозволяє формалізувати предметну область і визначити основні взаємозв’язки між її елементами. На етапі концептуального моделювання створюються діаграми, які наочно демонструють ключові процеси та функціональні можливості системи, що розробляється.
На рисунку 1.1 представлено діаграму варіантів використання (Use Case Diagram), яка відображає взаємодію користувача із системою моніторингу стану мостів. Центральним елементом є актор — користувач (User), який взаємодіє із ключовими функціями системи. Основні функції включають перегляд, додавання, редагування та видалення інформації, а також аналіз даних.
 
Рисунок 1.1 – Use case діаграма

На діаграмі варіантів використання, представленій на рисунку 1.1, відображені всі основні компоненти системи, що демонструють взаємодію користувача з функціональністю системи моніторингу. Нижче наведено детальний опис кожного компонента:
1.	Актор (User) - Це основний користувач системи, який взаємодіє з усіма доступними функціями. Актор може виконувати операції з інформацією про мости, аналізувати дані, а також користуватися додатковими можливостями, такими як автоматизація чи створення звітів.
2.	Перегляд інформації - Ця функція дозволяє користувачеві переглядати дані про мости, інспекторів і сенсори. Функціонал передбачає базовий доступ до інформації та є основою для розширення додатковими функціями.
3.	Фільтрація - Є розширенням функції перегляду інформації, яке дозволяє користувачеві відбирати лише ті дані, які відповідають заданим критеріям (наприклад, за статусом мосту або типом сенсора).
4.	Сортування - Ще одна додаткова функція перегляду інформації, що забезпечує впорядкування даних за певними параметрами, такими як дата створення або назва об’єкта.
5.	Пошук - Розширення функції перегляду, яке дозволяє користувачеві швидко знаходити необхідну інформацію за ключовими словами або параметрами.
6.	Редагування інформації - Ця функція надає користувачеві можливість змінювати вже існуючі дані в системі. Вона необхідна для підтримки актуальності інформації.
7.	Додавання інформації - Дозволяє користувачеві вносити нові дані до системи, зокрема інформацію про мости, інспекторів, сенсори та інші ключові об’єкти.
8.	Видалення інформації - Дає змогу видаляти застарілі або некоректні дані, забезпечуючи чистоту та відповідність бази даних поточному стану об’єктів.
9.	Аналіз інформації - Це більш складна функція, яка включає збір, обробку та аналіз даних для виявлення трендів або аномалій. Вона є ключовою для прийняття обґрунтованих рішень.


1.2 Опис побудови бази даних


На рисунку 1.2 зображено ER-діаграму, яка демонструє структуру бази даних для системи моніторингу стану мостів. Діаграма містить основні сутності, їхні атрибути та зв’язки між ними, що забезпечують організацію і управління даними в системі.

 
Рисунок 1.2 – ER-діаграма.

Опис основних сутностей
	Bridge (Міст) - Ця сутність є центральною в системі і зберігає інформацію про мости. Вона включає такі атрибути, як BridgeId (первинний ключ), Name, Description, BridgeType, Location, Status і CreationDate. Всі ці поля дозволяють описати характеристики кожного мосту, включаючи його місцезнаходження, тип і стан.
	Inspector (Інспектор) - Сутність містить інформацію про інспекторів, які здійснюють перевірку мостів. Атрибути включають InspectorId (первинний ключ), Name, Surname, PhoneNumber, Email, Role та BridgeId (зовнішній ключ). Зв’язок із таблицею Bridge забезпечує закріплення інспектора за конкретним мостом.
	Sensor (Сенсор) - Дана сутність зберігає інформацію про сенсори, встановлені на мостах. Вона містить атрибути SensorId (первинний ключ), Name, Description, Location, InstallationDate, BridgeId (зовнішній ключ) і SensorTypeId (зовнішній ключ). Сенсори закріплені за мостами через зв’язок "один до багатьох".
	SensorType (Тип сенсора) - Сутність описує типи сенсорів і має атрибути SensorTypeId (первинний ключ), Name та MeasurementValue. Це дозволяє зберігати інформацію про тип вимірювань, які здійснюють сенсори.
	SensorData (Дані сенсорів) - Ця сутність зберігає дані, отримані від сенсорів. Вона містить атрибути SensorDataId (первинний ключ), Date, Value і SensorId (зовнішній ключ). Зв’язок із таблицею Sensor дозволяє прив’язувати отримані дані до конкретного сенсора.
Аналіз зв’язків
	Між Bridge і Inspector: Зв’язок "один до багатьох" означає, що один міст може бути закріплений за кількома інспекторами, які його перевіряють.
	Між Bridge і Sensor: Зв’язок "один до багатьох" забезпечує можливість встановлення декількох сенсорів на одному мосту.
	Між Sensor і SensorType: Зв’язок "один до багатьох" дозволяє одному типу сенсорів використовуватися для кількох сенсорів.
	Між Sensor і SensorData: Зв’язок "один до багатьох" забезпечує прив’язку великої кількості даних до конкретного сенсора.


1.3 Серверна частина


Наведемо структуру проекту на діаграмі пакетів (див. рис. 1.3).

 
Рисунок 1.3 – Діаграма пакетів

Серверна частина системи моніторингу стану мостів виконує ключову роль у забезпеченні зберігання, обробки та доступу до даних. Основна її особливість полягає в реалізації стабільного й масштабованого API, що об’єднує клієнтські додатки з базою даних та IoT-сенсорами. Серверна частина розроблена з урахуванням сучасних вимог до продуктивності, безпеки та модульності.
Особливості реалізації
1.	Архітектура
Серверна частина побудована за принципами багатошарової архітектури, що забезпечує розподіл відповідальності між різними компонентами. Основні шари включають:
	Контролери — для обробки запитів від клієнтських додатків.
	Сервіси — для реалізації бізнес-логіки, включаючи обробку даних сенсорів та управління інформацією.
	Моделі даних — для взаємодії з базою даних і виконання CRUD-операцій.
2.	Використання ORM (Object-Relational Mapping)
Для спрощення взаємодії з базою даних використовується ORM, що забезпечує автоматичну генерацію запитів і дозволяє працювати з об’єктами замість сирого SQL-коду. Це знижує ризик помилок та покращує читабельність коду.
3.	Реалізація API
Серверна частина надає RESTful API для забезпечення взаємодії з клієнтськими додатками. API підтримує такі функції:
	CRUD-операції для управління сутностями (мости, сенсори, інспектори, дані сенсорів).
	Підтримка фільтрації, сортування та пошуку для зручного доступу до даних.
	Ендпоінти для візуалізації даних сенсорів (наприклад, графіки).
4.	Обробка даних сенсорів
Серверна частина приймає дані від IoT-сенсорів у реальному часі, зберігає їх у базі даних та аналізує для виявлення аномалій. Це забезпечує автоматизоване оновлення даних про стан мостів.
5.	Безпека
Для захисту даних реалізовані такі механізми:
	Аутентифікація та авторизація користувачів (наприклад, за допомогою JWT-токенів).
	Шифрування даних під час передачі (SSL/TLS).
	Контроль доступу до API через ролі користувачів (інспектори, адміністратори тощо).
6.	Обробка помилок
Впроваджено централізовану обробку помилок для забезпечення стабільності системи та інформативного логування, що спрощує процес діагностики і підтримки.
Використані технології та навички
1.	Мови програмування: Основна мова розробки — C# 
2.	Фреймворки та бібліотеки:
	ASP.NET Core для розробки RESTful API.
	Entity Framework для роботи з базою даних.
3.	База даних: SQL Server для зберігання структурованих даних.
4.	Технології безпеки: HTTPS для безпечного обміну даними.
5.	DevOps-практики:
	Docker для контейнеризації серверної частини.
	CI/CD для автоматизації розгортання.
Серверна частина системи забезпечує інтеграцію між клієнтськими додатками, IoT-сенсорами та базою даних, надаючи користувачам стабільний, безпечний і гнучкий інструмент для управління та аналізу даних про стан мостів. Реалізація сучасних підходів до розробки гарантує її ефективність та готовність до подальшого масштабування.


1.4 REST специфікація


Наведемо список всіх ендпоінтів програми:
Модель: Bridge
GET /api/bridges
Отримати список всіх мостів.
GET /api/bridges/{id}
Отримати інформацію про міст за його id.
POST /api/bridges
Додати новий міст.
PUT /api/bridges/{id}
Оновити інформацію про міст за його id.
DELETE /api/bridges/{id}
Видалити міст за його id.
Модель: Inspector
GET /api/inspectors
Отримати список всіх інспекторів.
GET /api/inspectors/{id}
Отримати інформацію про інспектора за його id.
POST /api/inspectors
Додати нового інспектора.
PUT /api/inspectors/{id}
Оновити інформацію про інспектора за його id.
DELETE /api/inspectors/{id}
Видалити інспектора за його id.
Модель: Sensor
GET /api/sensors
Отримати список всіх сенсорів.
GET /api/sensors/{id}
Отримати інформацію про сенсор за його id.
POST /api/sensors
Додати новий сенсор.
PUT /api/sensors/{id}
Оновити інформацію про сенсор за його id.
DELETE /api/sensors/{id}
Видалити сенсор за його id.
Модель: SensorType
GET /api/sensortypes
Отримати список всіх типів сенсорів.
GET /api/sensortypes/{id}
Отримати інформацію про тип сенсора за його id.
POST /api/sensortypes
Додати новий тип сенсора.
PUT /api/sensortypes/{id}
Оновити інформацію про тип сенсора за його id.
DELETE /api/sensortypes/{id}
Видалити тип сенсора за його id.
Модель: SensorData
GET /api/sensordata
Отримати список всіх даних сенсорів.
GET /api/sensordata/{id}
Отримати інформацію про дані сенсора за їх id.
POST /api/sensordata
Додати новий запис даних сенсора.
PUT /api/sensordata/{id}
Оновити дані сенсора за їх id.
DELETE /api/sensordata/{id}
Видалити дані сенсора за їх id.
ВИСНОВКИ


Розроблена серверна частина системи моніторингу стану мостів є ключовим компонентом, що забезпечує стабільну, безпечну та ефективну роботу застосунку. Завдяки чітко спроектованій архітектурі, впровадженню RESTful API та використанню сучасних технологій, серверна частина підтримує широкий функціонал, включаючи управління інформацією про мости, інспекторів, сенсори, а також обробку даних сенсорів у реальному часі.
Особлива увага була приділена модульності та масштабованості, що дозволяє системі адаптуватися до зростаючих потреб користувачів. Реалізація CRUD-операцій для всіх ключових сутностей, інтеграція IoT-сенсорів та підтримка розширених функцій, таких як фільтрація, сортування і візуалізація даних, створюють надійну платформу для аналізу та прийняття рішень.
Таким чином, розроблена серверна частина є гнучким і функціональним інструментом, який задовольняє поточні вимоги до моніторингу стану мостів і готовий до подальшого вдосконалення та розширення. Це забезпечує безпечне та ефективне управління інфраструктурними об’єктами, сприяючи їхній довговічності та надійності.
 
Посилання на відеозапис: https://youtu.be/jYuec-r8smY
Завдання на гітхабі: https://github.com/KyryloPugach/arkpz-pzpi-22-10-puhachov-kyrylo/tree/main/Task1

