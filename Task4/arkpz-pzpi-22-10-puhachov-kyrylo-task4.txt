Міністерство освіти та науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії



З лабораторної роботи №4
з дисципліни Аналіз та рефакторинг коду




 
Виконав:
студент групи ПЗПІ-22-10
Пугачов К. В.
Перевірив:
ас. кафедри ПІ
Дашенков Д.С.
 







Харків
 
МЕТА


Метою реалізації емуляції IoT-сенсора за допомогою WPF є створення інструменту, що дозволяє імітувати роботу сенсора в реальних умовах, включаючи генерацію даних і передачу їх на сервер через відповідний API-ендпоінт. Це рішення забезпечує тестування і валідацію роботи серверної частини системи моніторингу стану мостів, дозволяючи перевірити стабільність, коректність обробки даних і інтеграцію між компонентами. Емуляція також допомагає візуалізувати процес передачі даних і оцінити ефективність функціоналу системи без використання фізичних IoT-пристроїв.


ЗАВДАННЯ


Завданням роботи є створення WPF-додатка для емуляції роботи IoT-сенсора, який забезпечує генерацію даних та передачу їх на сервер. Основна мета полягає в розробці логіки сенсора, включаючи його унікальний ідентифікатор, форматування значень і передачу через REST API на відповідний ендпоінт серверної частини. Додаток повинен дозволяти конфігурувати параметри сенсора, такі як ідентифікатор, діапазон значень і інтервал передачі даних.
 
5 РОЗРОБКА IOT
5.1 Архітектура системи


Архітектура клієнтської частини системи моніторингу стану мостів побудована на базі React і забезпечує високу продуктивність, гнучкість та зручність в обслуговуванні. Вона спроектована за принципами компонентного підходу, що дозволяє створювати багаторазові, незалежні компоненти з чітко визначеною логікою та інтерфейсом.
Основні рівні архітектури
1.	Компонентний рівень
Уся клієнтська частина побудована з використанням React-компонентів. Кожен компонент відповідає за окрему функцію або частину інтерфейсу, наприклад.
2.	Рівень управління станом
Для управління станом застосунку використовується React Context або бібліотека для управління станом, наприклад Redux (залежно від складності застосунку). Цей рівень відповідає за зберігання глобального стану.
3.	Рівень взаємодії з API
Реалізований модуль для взаємодії з серверною частиною через REST API. Він обробляє запити до серверу, такі як отримання даних, створення, оновлення або видалення записів. Axios або Fetch API використовується для здійснення HTTP-запитів.
4.	Рівень візуалізації даних
Для побудови графіків і діаграм використовується бібліотека Chart.js. Вона дозволяє відображати дані сенсорів у вигляді графіків.
5.	UI/UX рівень
Використовуються компоненти бібліотек для швидкої розробки інтерфейсу, наприклад Material-UI або Ant Design. Це забезпечує єдиний стиль інтерфейсу, відповідність сучасним стандартам дизайну та зручність для користувачів.
Основний потік даних
1.	Користувач взаємодіє з інтерфейсом системи (наприклад, обирає міст або сенсор).
2.	Компоненти React передають запити через API для отримання або оновлення даних.
3.	Дані з серверної частини зберігаються у глобальному стані (через Context або Redux).
4.	Компоненти отримують дані із глобального стану та оновлюють відображення інтерфейсу.
5.	Дані сенсорів передаються у Chart.js для побудови графіків у реальному часі.
Особливості архітектури
	Модульність: кожна частина системи (управління даними, візуалізація, інтерфейс) реалізована у вигляді окремих модулів, що спрощує підтримку та розширення.
	Гнучкість: React забезпечує легку інтеграцію сторонніх бібліотек, таких як Chart.js, для побудови графіків, і дозволяє швидко адаптувати UI під нові вимоги.
	Масштабованість: архітектура дозволяє легко додавати нові функції без суттєвих змін у структурі системи.
Архітектура клієнтської частини забезпечує швидку, стабільну та зручну роботу з даними, а також високу якість візуалізації інформації, необхідної для моніторингу стану мостів.
 
Рисунок 1.1 – Діаграма варіантів використання.

На рисунку 1.2 представлена ER-діаграма, яка відображає структуру бази даних системи управління складом. Кожна сутність в діаграмі представляє таблицю в базі даних, а атрибути сутностей відповідають стовпцям цих таблиць.

 
Рисунок 1.2 – ER-діаграма.

Наведемо структуру проекту на діаграмі пакетів (див. рис. 1.3).

 
Рисунок 1.3 – Діаграма пакетів

На наведених діаграмах можна побачити структуру системи та структуру поведінки користувача на сайті.

5.2 Аналіз програмної реалізації


Програма побудована з використанням класу MainWindow, який виконує роль головного вікна WPF-додатка. У цьому класі визначено логіку роботи з інтерфейсом та взаємодії із сервером. Основними компонентами є:
	Текстові поля (idInput, valueInput) для введення ідентифікатора сенсора та його значення.
	Кнопка, яка викликає метод Button_Click для обробки введених даних та їх передачі на сервер.
	Клас SensorData, що представляє модель даних, яка передається на сервер у форматі JSON.
Аналіз функціональності:
	Збір даних - Метод Button_Click отримує введені користувачем дані з текстових полів, перевіряє коректність введення ідентифікатора сенсора (перетворення з рядка на ціле число) та формує об'єкт типу SensorData. Об’єкт включає дату, ідентифікатор сенсора та значення, яке передається.
	Серіалізація даних - Дані об’єкта SensorData серіалізуються у формат JSON за допомогою System.Text.Json.JsonSerializer. Це забезпечує коректну передачу структурованих даних на сервер.
	HTTP-запит - Для відправлення даних на сервер використовується HttpClient із методом POST. Адреса сервера визначається у змінній url. Дані додаються до запиту у вигляді JSON-повідомлення з встановленим MIME-типом application/json.
	Обробка відповіді сервера - Результат виконання HTTP-запиту перевіряється на успішність. У разі успішної передачі користувач отримує повідомлення про успіх через MessageBox. У випадку помилки відображається код статусу відповіді або текст винятку.
	Обробка помилок - Реалізовано механізм обробки помилок за допомогою конструкції try-catch. Це дозволяє перехоплювати помилки, що виникають під час виконання запиту або серіалізації, і сповіщати користувача через повідомлення.
Переваги реалізації:
	Простота реалізації взаємодії із сервером через REST API.
	Інтуїтивно зрозумілий графічний інтерфейс для введення даних та отримання зворотного зв’язку.
	Використання серіалізації в JSON забезпечує стандартний формат обміну даними.
	Обробка помилок сприяє стабільності програми та інформативності для користувача.
Можливі покращення
	Асинхронність - Метод SendAsync викликається з блокуючою операцією .Result, що може призводити до заморожування інтерфейсу. Використання ключового слова async/await дозволило б забезпечити асинхронне виконання запиту, зберігаючи реактивність інтерфейсу.
	Валідація даних - Валідацію значення сенсора (valueText) можна розширити для перевірки формату або діапазону значень, щоб зменшити ризик відправки некоректних даних.
	Логування - Додавання механізму логування (наприклад, через NLog або Serilog) забезпечило б збереження інформації про помилки та статуси запитів для подальшого аналізу.
	Конфігурація URL - Адресу сервера (url) варто винести до конфігураційного файлу (наприклад, appsettings.json), щоб спростити зміну середовища (локальне чи продуктивне).
 
ВИСНОВОК


Розроблений WPF-додаток для емуляції IoT-сенсора є ефективним інструментом для тестування серверної частини системи моніторингу стану мостів. Він дозволяє імітувати генерацію даних сенсора та їх передачу на сервер через REST API, забезпечуючи перевірку стабільності, коректності та сумісності компонентів системи.
Реалізований функціонал включає введення ідентифікатора сенсора та значення, серіалізацію даних у формат JSON, передачу через HTTP-запити та обробку відповіді від сервера. Користувач отримує зручний інтерфейс із простим налаштуванням параметрів, а також візуальний зворотний зв’язок щодо статусу операцій.
Програма продемонструвала свою стабільність і функціональність, проте існують можливості для подальшого вдосконалення. Зокрема, впровадження асинхронності, розширення валідації даних і налаштування URL дозволить покращити продуктивність і гнучкість додатка. Успішна реалізація цього інструменту підтверджує його корисність для моделювання роботи IoT-пристроїв, сприяючи подальшому розвитку системи моніторингу.

Посилання на відеозапис: https://youtu.be/8CP0mI-TjX4
Завдання на гітхабі: https://github.com/KyryloPugach/arkpz-pzpi-22-10-puhachov-kyrylo/tree/main/Task4
